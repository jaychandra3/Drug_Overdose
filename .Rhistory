fit_loess = predict(loess_model,se=TRUE)
predict_loess = predict(loess_model,as.numeric((length(country_arr) + 1):(length(country_arr) + 18)), se = TRUE)
x = as.numeric(1:length(c(country_arr, country_arr2 )))
df_plots <- data.frame(matrix(nrow = length(country$Deaths), ncol = 4))
colnames(df_plots) <- c('x', 'mean', 'upper', 'lower')
df_plots$x <- x
df_plots$mean = c(fit_loess$fit, predict_loess$fit)
df_plots$lower = c((fit_loess$fit - 1.96*fit_loess$se.fit), (predict_loess$fit - 1.96*predict_loess$se.fit))
df_plots$higher = c((fit_loess$fit + 1.96*fit_loess$se.fit), (predict_loess$fit + 1.96*predict_loess$se.fit))
ggplot(df_plots, aes(x=x,y=mean)) +
stat_summary(geom="ribbon", fun.min="lower", fun.max="higher", alpha=0.3) +
theme_bw()
plot(country$Deaths ~ x, type = 'l')
lines(c(fit_loess$fit, predict_loess$fit))
# Prediction (death count, adolescents)
country_arr = country$Deaths[1:(length(country$Deaths) - 18)]
country_arr2 = country$Deaths[(length(country$Deaths) - 17):length(country$Deaths)]
loess_model <- loess(country_arr ~ as.numeric(1:length(country_arr)), control = loess.control(surface = "direct"))
fit_loess = predict(loess_model,se=TRUE)
predict_loess = predict(loess_model,as.numeric((length(country_arr) + 1):(length(country_arr) + 18)), se = TRUE)
x = as.numeric(1:length(c(country_arr, country_arr2 )))
df_plots <- data.frame(matrix(nrow = length(country$Deaths), ncol = 4))
colnames(df_plots) <- c('x', 'mean', 'upper', 'lower')
df_plots$x <- x
df_plots$mean = c(fit_loess$fit, predict_loess$fit)
df_plots$lower = c((fit_loess$fit - 1.96*fit_loess$se.fit), (predict_loess$fit - 1.96*predict_loess$se.fit))
df_plots$higher = c((fit_loess$fit + 1.96*fit_loess$se.fit), (predict_loess$fit + 1.96*predict_loess$se.fit))
ggplot(df_plots, aes(x=x,y=mean)) +
# stat_summary(geom="ribbon", fun.min="lower", fun.max="higher", alpha=0.3) +
theme_bw()
plot(country$Deaths ~ x, type = 'l')
lines(c(fit_loess$fit, predict_loess$fit))
# Prediction (death count, adolescents)
country_arr = country$Deaths[1:(length(country$Deaths) - 18)]
country_arr2 = country$Deaths[(length(country$Deaths) - 17):length(country$Deaths)]
loess_model <- loess(country_arr ~ as.numeric(1:length(country_arr)), control = loess.control(surface = "direct"))
fit_loess = predict(loess_model,se=TRUE)
predict_loess = predict(loess_model,as.numeric((length(country_arr) + 1):(length(country_arr) + 18)), se = TRUE)
x = as.numeric(1:length(c(country_arr, country_arr2 )))
df_plots <- data.frame(matrix(nrow = length(country$Deaths), ncol = 4))
colnames(df_plots) <- c('x', 'mean', 'upper', 'lower')
df_plots$x <- x
df_plots$mean = c(fit_loess$fit, predict_loess$fit)
df_plots$lower = c((fit_loess$fit - 1.96*fit_loess$se.fit), (predict_loess$fit - 1.96*predict_loess$se.fit))
df_plots$higher = c((fit_loess$fit + 1.96*fit_loess$se.fit), (predict_loess$fit + 1.96*predict_loess$se.fit))
ggplot(df_plots, aes(x=x,y=mean)) +
geom_line() +
# stat_summary(geom="ribbon", fun.min="lower", fun.max="higher", alpha=0.3) +
theme_bw()
plot(country$Deaths ~ x, type = 'l')
lines(c(fit_loess$fit, predict_loess$fit))
# Prediction (death count, adolescents)
country_arr = country$Deaths[1:(length(country$Deaths) - 18)]
country_arr2 = country$Deaths[(length(country$Deaths) - 17):length(country$Deaths)]
loess_model <- loess(country_arr ~ as.numeric(1:length(country_arr)), control = loess.control(surface = "direct"))
fit_loess = predict(loess_model,se=TRUE)
predict_loess = predict(loess_model,as.numeric((length(country_arr) + 1):(length(country_arr) + 18)), se = TRUE)
x = as.numeric(1:length(c(country_arr, country_arr2 )))
df_plots <- data.frame(matrix(nrow = length(country$Deaths), ncol = 4))
colnames(df_plots) <- c('x', 'mean', 'upper', 'lower')
df_plots$x <- x
df_plots$mean = c(fit_loess$fit, predict_loess$fit)
df_plots$lower = c((fit_loess$fit - 1.96*fit_loess$se.fit), (predict_loess$fit - 1.96*predict_loess$se.fit))
df_plots$higher = c((fit_loess$fit + 1.96*fit_loess$se.fit), (predict_loess$fit + 1.96*predict_loess$se.fit))
ggplot(df_plots, aes(x=x,y=mean)) +
geom_line() +
stat_summary(geom="ribbon", fun.min="lower", fun.max="higher", alpha=0.3) +
theme_bw()
plot(country$Deaths ~ x, type = 'l')
lines(c(fit_loess$fit, predict_loess$fit))
# Prediction (death count, adolescents)
country_arr = country$Deaths[1:(length(country$Deaths) - 18)]
country_arr2 = country$Deaths[(length(country$Deaths) - 17):length(country$Deaths)]
loess_model <- loess(country_arr ~ as.numeric(1:length(country_arr)), control = loess.control(surface = "direct"))
fit_loess = predict(loess_model,se=TRUE)
predict_loess = predict(loess_model,as.numeric((length(country_arr) + 1):(length(country_arr) + 18)), se = TRUE)
x = as.numeric(1:length(c(country_arr, country_arr2 )))
df_plots <- data.frame(matrix(nrow = length(country$Deaths), ncol = 4))
colnames(df_plots) <- c('x', 'mean', 'upper', 'lower')
df_plots$x <- x
df_plots$mean = c(fit_loess$fit, predict_loess$fit)
df_plots$lower = c((fit_loess$fit - 1.96*fit_loess$se.fit), (predict_loess$fit - 1.96*predict_loess$se.fit))
df_plots$higher = c((fit_loess$fit + 1.96*fit_loess$se.fit), (predict_loess$fit + 1.96*predict_loess$se.fit))
ggplot(df_plots, aes(x=x,y=mean)) +
geom_line() +
stat_summary(geom="ribbon", ymin=lower, ymax=upper, alpha=0.3) +
theme_bw()
# Prediction (death count, adolescents)
country_arr = country$Deaths[1:(length(country$Deaths) - 18)]
country_arr2 = country$Deaths[(length(country$Deaths) - 17):length(country$Deaths)]
loess_model <- loess(country_arr ~ as.numeric(1:length(country_arr)), control = loess.control(surface = "direct"))
fit_loess = predict(loess_model,se=TRUE)
predict_loess = predict(loess_model,as.numeric((length(country_arr) + 1):(length(country_arr) + 18)), se = TRUE)
x = as.numeric(1:length(c(country_arr, country_arr2 )))
df_plots <- data.frame(matrix(nrow = length(country$Deaths), ncol = 4))
colnames(df_plots) <- c('x', 'mean', 'upper', 'lower')
df_plots$x <- x
df_plots$mean = c(fit_loess$fit, predict_loess$fit)
df_plots$lower = c((fit_loess$fit - 1.96*fit_loess$se.fit), (predict_loess$fit - 1.96*predict_loess$se.fit))
df_plots$higher = c((fit_loess$fit + 1.96*fit_loess$se.fit), (predict_loess$fit + 1.96*predict_loess$se.fit))
ggplot(df_plots, aes(x=x,y=mean)) +
geom_line() +
geom_ribbon(ymin=lower, ymax=upper, alpha=0.3) +
theme_bw()
View(df_plots)
# Prediction (death count, adolescents)
country_arr = country$Deaths[1:(length(country$Deaths) - 18)]
country_arr2 = country$Deaths[(length(country$Deaths) - 17):length(country$Deaths)]
loess_model <- loess(country_arr ~ as.numeric(1:length(country_arr)), control = loess.control(surface = "direct"))
fit_loess = predict(loess_model,se=TRUE)
predict_loess = predict(loess_model,as.numeric((length(country_arr) + 1):(length(country_arr) + 18)), se = TRUE)
x = as.numeric(1:length(c(country_arr, country_arr2 )))
df_plots <- data.frame(matrix(nrow = length(country$Deaths), ncol = 4))
colnames(df_plots) <- c('x', 'mean', 'upper', 'lower')
df_plots$x <- x
df_plots$mean = c(fit_loess$fit, predict_loess$fit)
df_plots$lower = c((fit_loess$fit - 1.96*fit_loess$se.fit), (predict_loess$fit - 1.96*predict_loess$se.fit))
df_plots$upper = c((fit_loess$fit + 1.96*fit_loess$se.fit), (predict_loess$fit + 1.96*predict_loess$se.fit))
ggplot(df_plots, aes(x=x,y=mean)) +
geom_line() +
geom_ribbon(ymin=lower, ymax=upper, alpha=0.3) +
theme_bw()
# Prediction (death count, adolescents)
country_arr = country$Deaths[1:(length(country$Deaths) - 18)]
country_arr2 = country$Deaths[(length(country$Deaths) - 17):length(country$Deaths)]
loess_model <- loess(country_arr ~ as.numeric(1:length(country_arr)), control = loess.control(surface = "direct"))
fit_loess = predict(loess_model,se=TRUE)
predict_loess = predict(loess_model,as.numeric((length(country_arr) + 1):(length(country_arr) + 18)), se = TRUE)
x = as.numeric(1:length(c(country_arr, country_arr2 )))
df_plots <- data.frame(matrix(nrow = length(country$Deaths), ncol = 4))
colnames(df_plots) <- c('x', 'mean', 'upper', 'lower')
df_plots$x <- x
df_plots$mean = c(fit_loess$fit, predict_loess$fit)
df_plots$lower = c((fit_loess$fit - 1.96*fit_loess$se.fit), (predict_loess$fit - 1.96*predict_loess$se.fit))
df_plots$upper = c((fit_loess$fit + 1.96*fit_loess$se.fit), (predict_loess$fit + 1.96*predict_loess$se.fit))
ggplot(df_plots, aes(x=x,y=mean, ymin=lower, ymax=upper)) +
geom_line() +
geom_ribbon(alpha=0.3) +
theme_bw()
plot(country$Deaths ~ x, type = 'l')
lines(c(fit_loess$fit, predict_loess$fit))
# Prediction (death count, adolescents)
country_arr = country$Deaths[1:(length(country$Deaths) - 18)]
country_arr2 = country$Deaths[(length(country$Deaths) - 17):length(country$Deaths)]
loess_model <- loess(country_arr ~ as.numeric(1:length(country_arr)), control = loess.control(surface = "direct"))
fit_loess = predict(loess_model,se=TRUE)
predict_loess = predict(loess_model,as.numeric((length(country_arr) + 1):(length(country_arr) + 18)), se = TRUE)
x = as.numeric(1:length(c(country_arr, country_arr2 )))
df_plots <- data.frame(matrix(nrow = length(country$Deaths), ncol = 4))
colnames(df_plots) <- c('x', 'mean', 'upper', 'lower')
df_plots$x <- x
df_plots$mean = c(fit_loess$fit, predict_loess$fit)
df_plots$lower = c((fit_loess$fit - 1.96*fit_loess$se.fit), (predict_loess$fit - 1.96*predict_loess$se.fit))
df_plots$upper = c((fit_loess$fit + 1.96*fit_loess$se.fit), (predict_loess$fit + 1.96*predict_loess$se.fit))
df_plots$actual = country$Deaths
ggplot(df_plots, aes(x=x,y=mean, ymin=lower, ymax=upper)) +
geom_line() +
geom_ribbon(alpha=0.3) +
geom_line(aes(y=actual)) +
theme_bw()
plot(country$Deaths ~ x, type = 'l')
lines(c(fit_loess$fit, predict_loess$fit))
?loess
US_pop_norm = (state_pop$Population[state_pop$State == 'United States']/100000)
excess = sum(country_arr2 - fit_loess$fit) / US_pop_norm
lower95 = sum(country_arr2 - df_plots$lower[(length(df_plots$lower) - 17):length(df_plots$lower)]) / US_pop_norm
upper95 = sum(country_arr2 - df_plots$lower[(length(df_plots$upper) -17):length(df_plots$upper))] / US_pop_norm
fit_loess$fit
US_pop_norm = (state_pop$Population[state_pop$State == 'United States']/100000)
excess = sum(country_arr2 - fit_loess$fit[(length(df_plots$lower) - 17):length(df_plots$lower)]) / US_pop_norm
lower95 = sum(country_arr2 - df_plots$lower[(length(df_plots$lower) - 17):length(df_plots$lower)]) / US_pop_norm
upper95 = sum(country_arr2 - df_plots$lower[(length(df_plots$upper) -17):length(df_plots$upper))] / US_pop_norm
US_pop_norm = (state_pop$Population[state_pop$State == 'United States']/100000)
excess = sum(country_arr2 - fit_loess$fit[(length(fit_loess$fit) - 17):length(fit_loess$fit)]) / US_pop_norm
lower95 = sum(country_arr2 - df_plots$lower[(length(df_plots$lower) - 17):length(df_plots$lower)]) / US_pop_norm
upper95 = sum(country_arr2 - df_plots$lower[(length(df_plots$upper) -17):length(df_plots$upper))] / US_pop_norm
fit_loess$fit[(length(fit_loess$fit) - 17):length(fit_loess$fit)]
country_arr2
US_pop_norm = (state_pop$Population[state_pop$State == 'United States']/100000)
excess = sum(country_arr2 - predict_loess$fit) / US_pop_norm
lower95 = sum(country_arr2 - df_plots$lower[(length(df_plots$lower) - 17):length(df_plots$lower)]) / US_pop_norm
upper95 = sum(country_arr2 - df_plots$lower[(length(df_plots$upper) -17):length(df_plots$upper))] / US_pop_norm
US_pop_norm = (state_pop$Population[state_pop$State == 'United States']/100000)
excess = sum(country_arr2 - predict_loess$fit) / US_pop_norm
lower95 = sum(country_arr2 - df_plots$lower[(length(df_plots$lower) - 17):length(df_plots$lower)]) / US_pop_norm
upper95 = sum(country_arr2 - df_plots$upper[(length(df_plots$upper) -17):length(df_plots$upper))] / US_pop_norm
US_pop_norm = (state_pop$Population[state_pop$State == 'United States']/100000)
excess = sum(country_arr2 - predict_loess$fit) / US_pop_norm
lower95 = sum(country_arr2 - df_plots$lower[(length(df_plots$lower) - 17):length(df_plots$lower)]) / US_pop_norm
upper95 = sum(country_arr2 - df_plots$upper[(length(df_plots$upper) -17):length(df_plots$upper)] / US_pop_norm
# excess2 = sum(as.numeric(t_Country2)[1:4] - as.numeric(f_fit[["mean"]])[1:4]) / US_pop_norm
# lower952 = sum(as.numeric(t_Country2)[1:4] - as.numeric(f_fit[["lower"]])[1:4]) / US_pop_norm
# upper952 = sum(as.numeric(t_Country2)[1:4] - as.numeric(f_fit[["upper"]])[1:4]) / US_pop_norm
US_pop_norm = (state_pop$Population[state_pop$State == 'United States']/100000)
excess = sum(country_arr2 - predict_loess$fit) / US_pop_norm
lower95 = sum(country_arr2 - df_plots$lower[(length(df_plots$lower) - 17):length(df_plots$lower)]) / US_pop_norm
upper95 = sum(country_arr2 - df_plots$upper[(length(df_plots$upper) -17):length(df_plots$upper)]) / US_pop_norm
# excess2 = sum(as.numeric(t_Country2)[1:4] - as.numeric(f_fit[["mean"]])[1:4]) / US_pop_norm
# lower952 = sum(as.numeric(t_Country2)[1:4] - as.numeric(f_fit[["lower"]])[1:4]) / US_pop_norm
# upper952 = sum(as.numeric(t_Country2)[1:4] - as.numeric(f_fit[["upper"]])[1:4]) / US_pop_norm
country[country == 'Suppressed'] <- NA
country$Deaths = as.numeric(country$Deaths)
t_Country = ts(country$Deaths[1:(length(country$Deaths) - 18)], start = decimal_date(as.Date("2015-01-01")), frequency = 12)
parameters = expand.grid(p = seq(0, 2), d = seq(0, 2), q = seq(0, 1),
P = seq(0, 1), D = seq(0, 1), Q = seq(0, 1))
best_aic = 10000
for (i in seq(1, nrow(parameters))){
fit <- Arima(t_Country, order = c(parameters$p[i], parameters$d[i], parameters$q[i]),
seasonal = c(parameters$P[i], parameters$D[i], parameters$Q[i]), method="ML")
aic = fit[["aicc"]]
if (aic<best_aic){
best_aic = aic
best_fit = fit
best_params = parameters[i, ]
}
}
# fit <- Arima(t_Country, order = c(1, 1, 1),
#                      seasonal = c(1, 0, 1), method="ML")
f_fit<-forecast(fit, h = 18, robust = TRUE, level = 95)
# Confidence Interval Calculation Attempt 1
# sim <- matrix(NA, ncol=18,nrow=1000)
# for(i in 1:1000)
#   sim[i,] <- simulate(fit,18, future=TRUE)
# se <- apply(sim,2,sd)/sqrt(1000)
# f_fit$upper <- f_fit$mean + 1.96*se
# f_fit$lower <- f_fit$mean - 1.96*se
# Confidence Interval Attempt 2
f_fit$upper <- f_fit$mean + 1.96*sqrt(fit$sigma2)
f_fit$lower <- f_fit$mean - 1.96*sqrt(fit$sigma2)
t_Country2 = ts(country$Deaths[(length(country$Deaths) - 17):length(country$Deaths)], start = decimal_date(as.Date("2020-03-01")), frequency = 12)
model_name = paste('SARIMA(', best_params[1], best_params[2], best_params[3], ')(', best_params[4], best_params[5], best_params[6], ')[12]')
autoplot(t_Country, series="Data", size = 0.7) +
autolayer(fit$fitted, series= model_name, size = 0.5) +
autolayer(f_fit, series="Prediction") +
autolayer(t_Country2, series = "True Post-Pandemic") +
xlab("Year") + ylab("Drug Overdose Deaths") + ggtitle("United States") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
ggsave(paste('plots/',"US States Time"),
device = "png")
View(f_fit)
View(best_params)
country[country == 'Suppressed'] <- NA
country$Deaths = as.numeric(country$Deaths)
t_Country = ts(country$Deaths[1:(length(country$Deaths) - 18)], start = decimal_date(as.Date("2015-01-01")), frequency = 12)
parameters = expand.grid(p = seq(0, 2), d = seq(0, 2), q = seq(0, 1),
P = seq(0, 1), D = seq(0, 1), Q = seq(0, 1))
best_aic = 10000
for (i in seq(1, nrow(parameters))){
fit <- Arima(t_Country, order = c(parameters$p[i], parameters$d[i], parameters$q[i]),
seasonal = c(parameters$P[i], parameters$D[i], parameters$Q[i]), method="ML")
aic = fit[["aicc"]]
if (aic<best_aic){
best_aic = aic
best_fit = fit
best_params = parameters[i, ]
}
}
# fit <- Arima(t_Country, order = c(1, 1, 1),
#                      seasonal = c(1, 0, 1), method="ML")
f_fit<-forecast(fit, h = 18, robust = TRUE, level = 95)
# Confidence Interval Calculation Attempt 1
# sim <- matrix(NA, ncol=18,nrow=1000)
# for(i in 1:1000)
#   sim[i,] <- simulate(fit,18, future=TRUE)
# se <- apply(sim,2,sd)/sqrt(1000)
# f_fit$upper <- f_fit$mean + 1.96*se
# f_fit$lower <- f_fit$mean - 1.96*se
# Confidence Interval Attempt 2
f_fit$upper <- f_fit$mean + 1.96*sqrt(fit$sigma2)
f_fit$lower <- f_fit$mean - 1.96*sqrt(fit$sigma2)
t_Country2 = ts(country$Deaths[(length(country$Deaths) - 17):length(country$Deaths)], start = decimal_date(as.Date("2020-03-01")), frequency = 12)
model_name = paste('SARIMA(', best_params[1], best_params[2], best_params[3], ')(', best_params[4], best_params[5], best_params[6], ')[12]')
autoplot(t_Country, series="Data", size = 0.7) +
autolayer(fit$fitted, series= model_name, size = 0.5) +
autolayer(f_fit, series="Prediction") +
autolayer(t_Country2, series = "True Post-Pandemic") +
xlab("Year") + ylab("Drug Overdose Deaths") + ggtitle("United States") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
ggsave(paste('plots/',"US States Time"),
device = "png")
View(best_params)
View(f_fit)
View(fit)
View(f_fit)
View(f_fit)
country[country == 'Suppressed'] <- NA
country$Deaths = as.numeric(country$Deaths)
t_Country = ts(country$Deaths[1:(length(country$Deaths) - 18)], start = decimal_date(as.Date("2015-01-01")), frequency = 12)
parameters = expand.grid(p = seq(0, 2), d = seq(0, 2), q = seq(0, 1),
P = seq(0, 1), D = seq(0, 1), Q = seq(0, 1))
best_aic = 10000
for (i in seq(1, nrow(parameters))){
fit <- Arima(t_Country, order = c(parameters$p[i], parameters$d[i], parameters$q[i]),
seasonal = c(parameters$P[i], parameters$D[i], parameters$Q[i]), method="ML")
aic = fit[["aicc"]]
if (aic<best_aic){
best_aic = aic
best_fit = fit
best_params = parameters[i, ]
}
}
# fit <- Arima(t_Country, order = c(1, 1, 1),
#                      seasonal = c(1, 0, 1), method="ML")
f_fit<-forecast(fit, h = 18, robust = TRUE, level = 95)
# Confidence Interval Calculation Attempt 1
# sim <- matrix(NA, ncol=18,nrow=1000)
# for(i in 1:1000)
#   sim[i,] <- simulate(fit,18, future=TRUE)
# se <- apply(sim,2,sd)/sqrt(1000)
# f_fit$upper <- f_fit$mean + 1.96*se
# f_fit$lower <- f_fit$mean - 1.96*se
# Confidence Interval Attempt 2
# f_fit$upper <- f_fit$mean + 1.96*sqrt(fit$sigma2)
# f_fit$lower <- f_fit$mean - 1.96*sqrt(fit$sigma2)
t_Country2 = ts(country$Deaths[(length(country$Deaths) - 17):length(country$Deaths)], start = decimal_date(as.Date("2020-03-01")), frequency = 12)
model_name = paste('SARIMA(', best_params[1], best_params[2], best_params[3], ')(', best_params[4], best_params[5], best_params[6], ')[12]')
autoplot(t_Country, series="Data", size = 0.7) +
autolayer(fit$fitted, series= model_name, size = 0.5) +
autolayer(f_fit, series="Prediction") +
autolayer(t_Country2, series = "True Post-Pandemic") +
xlab("Year") + ylab("Drug Overdose Deaths") + ggtitle("United States") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
ggsave(paste('plots/',"US States Time"),
device = "png")
View(best_fit)
View(best_fit)
View(f_fit)
country[country == 'Suppressed'] <- NA
country$Deaths = as.numeric(country$Deaths)
t_Country = ts(country$Deaths[1:(length(country$Deaths) - 18)], start = decimal_date(as.Date("2015-01-01")), frequency = 12)
parameters = expand.grid(p = seq(0, 2), d = seq(0, 2), q = seq(0, 1),
P = seq(0, 1), D = seq(0, 1), Q = seq(0, 1))
best_aic = 10000
for (i in seq(1, nrow(parameters))){
fit <- Arima(t_Country, order = c(parameters$p[i], parameters$d[i], parameters$q[i]),
seasonal = c(parameters$P[i], parameters$D[i], parameters$Q[i]), method="ML")
aic = fit[["aicc"]]
if (aic<best_aic){
best_aic = aic
best_fit = fit
best_params = parameters[i, ]
}
}
# fit <- Arima(t_Country, order = c(1, 1, 1),
#                      seasonal = c(1, 0, 1), method="ML")
f_fit<-forecast(best_fit, h = 18, robust = TRUE, level = 95)
# Confidence Interval Calculation Attempt 1
# sim <- matrix(NA, ncol=18,nrow=1000)
# for(i in 1:1000)
#   sim[i,] <- simulate(fit,18, future=TRUE)
# se <- apply(sim,2,sd)/sqrt(1000)
# f_fit$upper <- f_fit$mean + 1.96*se
# f_fit$lower <- f_fit$mean - 1.96*se
# Confidence Interval Attempt 2
# f_fit$upper <- f_fit$mean + 1.96*sqrt(fit$sigma2)
# f_fit$lower <- f_fit$mean - 1.96*sqrt(fit$sigma2)
t_Country2 = ts(country$Deaths[(length(country$Deaths) - 17):length(country$Deaths)], start = decimal_date(as.Date("2020-03-01")), frequency = 12)
model_name = paste('SARIMA(', best_params[1], best_params[2], best_params[3], ')(', best_params[4], best_params[5], best_params[6], ')[12]')
autoplot(t_Country, series="Data", size = 0.7) +
autolayer(fit$fitted, series= model_name, size = 0.5) +
autolayer(f_fit, series="Prediction") +
autolayer(t_Country2, series = "True Post-Pandemic") +
xlab("Year") + ylab("Drug Overdose Deaths") + ggtitle("United States") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
ggsave(paste('plots/',"US States Time"),
device = "png")
US_pop_norm = (state_pop$Population[state_pop$State == 'United States']/100000)
excess = sum(as.numeric(t_Country2) - as.numeric(f_fit[["mean"]])) / US_pop_norm
lower95 = sum(as.numeric(t_Country2) - as.numeric(f_fit[["lower"]])) / US_pop_norm
upper95 = sum(as.numeric(t_Country2) - as.numeric(f_fit[["upper"]])) / US_pop_norm
excess2 = sum(as.numeric(t_Country2)[1:4] - as.numeric(f_fit[["mean"]])[1:4]) / US_pop_norm
lower952 = sum(as.numeric(t_Country2)[1:4] - as.numeric(f_fit[["lower"]])[1:4]) / US_pop_norm
upper952 = sum(as.numeric(t_Country2)[1:4] - as.numeric(f_fit[["upper"]])[1:4]) / US_pop_norm
country[country == 'Suppressed'] <- NA
country$Deaths = as.numeric(country$Deaths)
t_Country = ts(country$Deaths[1:(length(country$Deaths) - 18)], start = decimal_date(as.Date("2015-01-01")), frequency = 12)
parameters = expand.grid(p = seq(0, 2), d = seq(0, 2), q = seq(0, 1),
P = seq(0, 1), D = seq(0, 1), Q = seq(0, 1))
best_aic = 10000
for (i in seq(1, nrow(parameters))){
fit <- Arima(t_Country, order = c(parameters$p[i], parameters$d[i], parameters$q[i]),
seasonal = c(parameters$P[i], parameters$D[i], parameters$Q[i]), method="ML")
aic = fit[["aicc"]]
if (aic<best_aic){
best_aic = aic
best_fit = fit
best_params = parameters[i, ]
}
}
fit <- Arima(t_Country, order = c(1, 1, 1),
seasonal = c(1, 0, 1), method="ML")
f_fit<-forecast(best_fit, h = 18, robust = TRUE, level = 95)
# Confidence Interval Calculation Attempt 1
# sim <- matrix(NA, ncol=18,nrow=1000)
# for(i in 1:1000)
#   sim[i,] <- simulate(fit,18, future=TRUE)
# se <- apply(sim,2,sd)/sqrt(1000)
# f_fit$upper <- f_fit$mean + 1.96*se
# f_fit$lower <- f_fit$mean - 1.96*se
# Confidence Interval Attempt 2
# f_fit$upper <- f_fit$mean + 1.96*sqrt(fit$sigma2)
# f_fit$lower <- f_fit$mean - 1.96*sqrt(fit$sigma2)
t_Country2 = ts(country$Deaths[(length(country$Deaths) - 17):length(country$Deaths)], start = decimal_date(as.Date("2020-03-01")), frequency = 12)
model_name = paste('SARIMA(', best_params[1], best_params[2], best_params[3], ')(', best_params[4], best_params[5], best_params[6], ')[12]')
autoplot(t_Country, series="Data", size = 0.7) +
autolayer(fit$fitted, series= model_name, size = 0.5) +
autolayer(f_fit, series="Prediction") +
autolayer(t_Country2, series = "True Post-Pandemic") +
xlab("Year") + ylab("Drug Overdose Deaths") + ggtitle("United States") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
ggsave(paste('plots/',"US States Time"),
device = "png")
country[country == 'Suppressed'] <- NA
country$Deaths = as.numeric(country$Deaths)
t_Country = ts(country$Deaths[1:(length(country$Deaths) - 18)], start = decimal_date(as.Date("2015-01-01")), frequency = 12)
parameters = expand.grid(p = seq(0, 2), d = seq(0, 2), q = seq(0, 1),
P = seq(0, 1), D = seq(0, 1), Q = seq(0, 1))
best_aic = 10000
for (i in seq(1, nrow(parameters))){
fit <- Arima(t_Country, order = c(parameters$p[i], parameters$d[i], parameters$q[i]),
seasonal = c(parameters$P[i], parameters$D[i], parameters$Q[i]), method="ML")
aic = fit[["aicc"]]
if (aic<best_aic){
best_aic = aic
best_fit = fit
best_params = parameters[i, ]
}
}
# fit <- Arima(t_Country, order = c(1, 1, 1),
#                      seasonal = c(1, 0, 1), method="ML")
f_fit<-forecast(best_fit, h = 18, robust = TRUE, level = 95)
# Confidence Interval Calculation Attempt 1
# sim <- matrix(NA, ncol=18,nrow=1000)
# for(i in 1:1000)
#   sim[i,] <- simulate(fit,18, future=TRUE)
# se <- apply(sim,2,sd)/sqrt(1000)
# f_fit$upper <- f_fit$mean + 1.96*se
# f_fit$lower <- f_fit$mean - 1.96*se
# Confidence Interval Attempt 2
# f_fit$upper <- f_fit$mean + 1.96*sqrt(fit$sigma2)
# f_fit$lower <- f_fit$mean - 1.96*sqrt(fit$sigma2)
t_Country2 = ts(country$Deaths[(length(country$Deaths) - 17):length(country$Deaths)], start = decimal_date(as.Date("2020-03-01")), frequency = 12)
model_name = paste('SARIMA(', best_params[1], best_params[2], best_params[3], ')(', best_params[4], best_params[5], best_params[6], ')[12]')
autoplot(t_Country, series="Data", size = 0.7) +
autolayer(fit$fitted, series= model_name, size = 0.5) +
autolayer(f_fit, series="Prediction") +
autolayer(t_Country2, series = "True Post-Pandemic") +
xlab("Year") + ylab("Drug Overdose Deaths") + ggtitle("United States") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
ggsave(paste('plots/',"US States Time"),
device = "png")
View(f_fit)
plots = list()
state_names = as.character(unique(state$State))
df_params <- data.frame(matrix(nrow = 51, ncol = 7))
colnames(df_params) <- c('State', 'p', 'd', 'q', 'P', 'D', 'Q')
df_excess <- data.frame(matrix(nrow = 51, ncol = 7))
colnames(df_excess) <- c('State', 'Excess', 'Lower95', 'Upper95', 'Excess_2', 'Lower95_2', 'Upper95_2')
for (i in seq(1, length(state_names))){
state_name = state_names[i]
State_data = state %>% filter(State == state_name)
State_data[State_data == 'Suppressed'] <- NA
State_data$Deaths = as.numeric(levels(State_data$Deaths))[State_data$Deaths]
t_State = ts(State_data$Deaths[1:(length(State_data$Deaths) - 18)], start = decimal_date(as.Date("2015-01-01")), frequency = 12)
parameters = expand.grid(p = seq(0, 1), d = seq(0, 1), q = seq(0, 1),
P = seq(0, 1), D = seq(0, 1), Q = seq(0, 1))
best_aic = 10000
for (j in seq(1, nrow(parameters))){
fit <- tryCatch(
{
Arima(t_State, order = c(parameters$p[j], parameters$d[j], parameters$q[j]),
seasonal = c(parameters$P[j], parameters$D[j], parameters$Q[j]), method="ML")
},
error = function(e){
tryCatch(
{
Arima(t_State, order = c(1, 1, 0),
seasonal = c(1, 0, 1), method="ML")
},
error = function(e){
Arima(t_State, order = c(0, 1, 0),
seasonal = c(1, 0, 0), method="ML")
}
)
}
)
aic = fit[["aicc"]]
if (aic<best_aic){
best_aic = aic
best_fit = fit
best_params = parameters[j, ]
}
}
f_fit<-forecast(best_fit, robust = TRUE, h = 18, level = 95)
t_State2 = ts(State_data$Deaths[(length(State_data$Deaths) - 17):length(State_data$Deaths)], start = decimal_date(as.Date("2020-03-01")), frequency = 12)
excess = as.numeric(t_State2) - as.numeric(f_fit[["mean"]])
lower95 = as.numeric(t_State2) - as.numeric(f_fit[["lower"]])
upper95 = as.numeric(t_State2) - as.numeric(f_fit[["upper"]])
excess2 = as.numeric(t_State2)[1:4] - as.numeric(f_fit[["mean"]])[1:4]
lower952 = as.numeric(t_State2)[1:4] - as.numeric(f_fit[["lower"]])[1:4]
upper952 = as.numeric(t_State2)[1:4] - as.numeric(f_fit[["upper"]])[1:4]
df_params[i, ] = c(state_name, best_params$p, best_params$d, best_params$q, best_params$P, best_params$D, best_params$Q)
df_excess[i, ] = c(state_name, sum(excess), sum(lower95), sum(upper95), sum(excess2), sum(lower952), sum(upper952))
model_name = paste('SARIMA(', best_params[1], best_params[2], best_params[3], ')(', best_params[4], best_params[5], best_params[6], ')[12]')
g = autoplot(t_State, series="Data") +
autolayer(fit$fitted, series=model_name) +
autolayer(f_fit, series="Prediction") +
autolayer(t_State2, series = "True Post-Pandemic") +
xlab("Year") + ylab("Drug Overdose Deaths") + ggtitle(state_name) + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
plots[[i]] = g
}
View(f_fit)
View(best_fit)
View(best_params)
View(f_fit)
View(best_fit)
View(best_fit)
View(best_params)

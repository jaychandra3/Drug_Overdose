upper95 = sum(as.numeric(t_Country2) - as.numeric(f_fit[["upper"]])) / US_pop_norm
excess2 = sum(as.numeric(t_Country2)[1:4] - as.numeric(f_fit[["mean"]])[1:4]) / US_pop_norm
lower952 = sum(as.numeric(t_Country2)[1:4] - as.numeric(f_fit[["lower"]])[1:4]) / US_pop_norm
upper952 = sum(as.numeric(t_Country2)[1:4] - as.numeric(f_fit[["upper"]])[1:4]) / US_pop_norm
excess2
lower952
upper952
US_pop_norm = (state_pop$Population[state_pop$State == 'United States']/100000)
excess = sum(as.numeric(t_Country2) - as.numeric(f_fit[["mean"]])) / US_pop_norm
lower95 = sum(as.numeric(t_Country2) - as.numeric(f_fit[["lower"]])) / US_pop_norm
upper95 = sum(as.numeric(t_Country2) - as.numeric(f_fit[["upper"]])) / US_pop_norm
excess2 = sum(as.numeric(t_Country2)[1:3] - as.numeric(f_fit[["mean"]])[1:3]) / US_pop_norm
lower952 = sum(as.numeric(t_Country2)[1:3] - as.numeric(f_fit[["lower"]])[1:3]) / US_pop_norm
upper952 = sum(as.numeric(t_Country2)[1:3] - as.numeric(f_fit[["upper"]])[1:3]) / US_pop_norm
excess2
lower952
upper952
country_1 <- read.delim("data/Benz/Country_Month.txt")
country_2 <- read.delim("data/Benz/Country_Month_2.txt")
country_1 = country_1[country_1$Notes == "", ]
country_2 = country_2[country_2$Notes == "" & country_2$Month.Code %in% c('2021/01', '2021/02', '2021/03', '2021/04', '2021/05', '2021/06', '2021/07', '2021/08'), ]
country = rbind(country_1, country_2)
country[country == 'Suppressed'] <- NA
country$Deaths = as.numeric(country$Deaths)
t_Country = ts(country$Deaths[1:(length(country$Deaths) - 18)], start = decimal_date(as.Date("2015-01-01")), frequency = 12)
parameters = expand.grid(p = seq(0, 2), d = seq(0, 2), q = seq(0, 1),
P = seq(0, 1), D = seq(0, 1), Q = seq(0, 1))
best_aic = 10000
for (i in seq(1, nrow(parameters))){
fit <- Arima(t_Country, order = c(parameters$p[i], parameters$d[i], parameters$q[i]),
seasonal = c(parameters$P[i], parameters$D[i], parameters$Q[i]), method="ML")
aic = fit[["aicc"]]
if (aic<best_aic){
best_aic = aic
best_fit = fit
best_params = parameters[i, ]
}
}
# fit <- Arima(t_Country, order = c(1, 1, 1),
#                      seasonal = c(1, 0, 1), method="ML")
f_fit<-forecast(best_fit, h = 18, robust = TRUE, level = 95)
# Confidence Interval Calculation Attempt 1
# sim <- matrix(NA, ncol=18,nrow=1000)
# for(i in 1:1000)
#   sim[i,] <- simulate(fit,18, future=TRUE)
# se <- apply(sim,2,sd)/sqrt(1000)
# f_fit$upper <- f_fit$mean + 1.96*se
# f_fit$lower <- f_fit$mean - 1.96*se
# Confidence Interval Attempt 2
# f_fit$upper <- f_fit$mean + 1.96*sqrt(fit$sigma2)
# f_fit$lower <- f_fit$mean - 1.96*sqrt(fit$sigma2)
t_Country2 = ts(country$Deaths[(length(country$Deaths) - 17):length(country$Deaths)], start = decimal_date(as.Date("2020-03-01")), frequency = 12)
model_name = paste('SARIMA(', best_params[1], best_params[2], best_params[3], ')(', best_params[4], best_params[5], best_params[6], ')[12]')
autoplot(t_Country, series="Data", size = 0.7) +
autolayer(fit$fitted, series= model_name, size = 0.5) +
autolayer(f_fit, series="Prediction") +
autolayer(t_Country2, series = "True Post-Pandemic") +
xlab("Year") + ylab("benzodiazepines Overdose Deaths") + ggtitle("United States") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
ggsave(paste('plots/',"US States Time benzodiazepines"),
device = "png")
US_pop_norm = (state_pop$Population[state_pop$State == 'United States']/100000)
excess = sum(as.numeric(t_Country2) - as.numeric(f_fit[["mean"]])) / US_pop_norm
lower95 = sum(as.numeric(t_Country2) - as.numeric(f_fit[["lower"]])) / US_pop_norm
upper95 = sum(as.numeric(t_Country2) - as.numeric(f_fit[["upper"]])) / US_pop_norm
excess2 = sum(as.numeric(t_Country2)[1:4] - as.numeric(f_fit[["mean"]])[1:4]) / US_pop_norm
lower952 = sum(as.numeric(t_Country2)[1:4] - as.numeric(f_fit[["lower"]])[1:4]) / US_pop_norm
upper952 = sum(as.numeric(t_Country2)[1:4] - as.numeric(f_fit[["upper"]])[1:4]) / US_pop_norm
excess2
lower952
upper952
country_1 <- read.delim("data/Alcohol/Country_Month.txt")
country_2 <- read.delim("data/Alcohol/Country_Month_2.txt")
country_1 = country_1[country_1$Notes == "", ]
country_2 = country_2[country_2$Notes == "" & country_2$Month.Code %in% c('2021/01', '2021/02', '2021/03', '2021/04', '2021/05', '2021/06', '2021/07', '2021/08'), ]
country = rbind(country_1, country_2)
country[country == 'Suppressed'] <- NA
country$Deaths = as.numeric(country$Deaths)
t_Country = ts(country$Deaths[1:(length(country$Deaths) - 18)], start = decimal_date(as.Date("2015-01-01")), frequency = 12)
parameters = expand.grid(p = seq(0, 2), d = seq(0, 2), q = seq(0, 1),
P = seq(0, 1), D = seq(0, 1), Q = seq(0, 1))
best_aic = 10000
for (i in seq(1, nrow(parameters))){
fit <- Arima(t_Country, order = c(parameters$p[i], parameters$d[i], parameters$q[i]),
seasonal = c(parameters$P[i], parameters$D[i], parameters$Q[i]), method="ML")
aic = fit[["aicc"]]
if (aic<best_aic){
best_aic = aic
best_fit = fit
best_params = parameters[i, ]
}
}
# fit <- Arima(t_Country, order = c(1, 1, 1),
#                      seasonal = c(1, 0, 1), method="ML")
f_fit<-forecast(best_fit, h = 18, robust = TRUE, level = 95)
# Confidence Interval Calculation Attempt 1
# sim <- matrix(NA, ncol=18,nrow=1000)
# for(i in 1:1000)
#   sim[i,] <- simulate(fit,18, future=TRUE)
# se <- apply(sim,2,sd)/sqrt(1000)
# f_fit$upper <- f_fit$mean + 1.96*se
# f_fit$lower <- f_fit$mean - 1.96*se
# Confidence Interval Attempt 2
# f_fit$upper <- f_fit$mean + 1.96*sqrt(fit$sigma2)
# f_fit$lower <- f_fit$mean - 1.96*sqrt(fit$sigma2)
t_Country2 = ts(country$Deaths[(length(country$Deaths) - 17):length(country$Deaths)], start = decimal_date(as.Date("2020-03-01")), frequency = 12)
model_name = paste('SARIMA(', best_params[1], best_params[2], best_params[3], ')(', best_params[4], best_params[5], best_params[6], ')[12]')
autoplot(t_Country, series="Data", size = 0.7) +
autolayer(fit$fitted, series= model_name, size = 0.5) +
autolayer(f_fit, series="Prediction") +
autolayer(t_Country2, series = "True Post-Pandemic") +
xlab("Year") + ylab("Alcohol Overdose Deaths") + ggtitle("United States") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
ggsave(paste('plots/',"US States Time Alcohol"),
device = "png")
US_pop_norm = (state_pop$Population[state_pop$State == 'United States']/100000)
excess = sum(as.numeric(t_Country2) - as.numeric(f_fit[["mean"]])) / US_pop_norm
lower95 = sum(as.numeric(t_Country2) - as.numeric(f_fit[["lower"]])) / US_pop_norm
upper95 = sum(as.numeric(t_Country2) - as.numeric(f_fit[["upper"]])) / US_pop_norm
excess2 = sum(as.numeric(t_Country2)[1:3] - as.numeric(f_fit[["mean"]])[1:3]) / US_pop_norm
lower952 = sum(as.numeric(t_Country2)[1:3] - as.numeric(f_fit[["lower"]])[1:3]) / US_pop_norm
upper952 = sum(as.numeric(t_Country2)[1:3] - as.numeric(f_fit[["upper"]])[1:3]) / US_pop_norm
excess2
lower952
upper952
country_1 <- read.delim("data/Benz/Country_Month.txt")
country_2 <- read.delim("data/Benz/Country_Month_2.txt")
country_1 = country_1[country_1$Notes == "", ]
country_2 = country_2[country_2$Notes == "" & country_2$Month.Code %in% c('2021/01', '2021/02', '2021/03', '2021/04', '2021/05', '2021/06', '2021/07', '2021/08'), ]
country = rbind(country_1, country_2)
country[country == 'Suppressed'] <- NA
country$Deaths = as.numeric(country$Deaths)
t_Country = ts(country$Deaths[1:(length(country$Deaths) - 18)], start = decimal_date(as.Date("2015-01-01")), frequency = 12)
parameters = expand.grid(p = seq(0, 2), d = seq(0, 2), q = seq(0, 1),
P = seq(0, 1), D = seq(0, 1), Q = seq(0, 1))
best_aic = 10000
for (i in seq(1, nrow(parameters))){
fit <- Arima(t_Country, order = c(parameters$p[i], parameters$d[i], parameters$q[i]),
seasonal = c(parameters$P[i], parameters$D[i], parameters$Q[i]), method="ML")
aic = fit[["aicc"]]
if (aic<best_aic){
best_aic = aic
best_fit = fit
best_params = parameters[i, ]
}
}
# fit <- Arima(t_Country, order = c(1, 1, 1),
#                      seasonal = c(1, 0, 1), method="ML")
f_fit<-forecast(best_fit, h = 18, robust = TRUE, level = 95)
# Confidence Interval Calculation Attempt 1
# sim <- matrix(NA, ncol=18,nrow=1000)
# for(i in 1:1000)
#   sim[i,] <- simulate(fit,18, future=TRUE)
# se <- apply(sim,2,sd)/sqrt(1000)
# f_fit$upper <- f_fit$mean + 1.96*se
# f_fit$lower <- f_fit$mean - 1.96*se
# Confidence Interval Attempt 2
# f_fit$upper <- f_fit$mean + 1.96*sqrt(fit$sigma2)
# f_fit$lower <- f_fit$mean - 1.96*sqrt(fit$sigma2)
t_Country2 = ts(country$Deaths[(length(country$Deaths) - 17):length(country$Deaths)], start = decimal_date(as.Date("2020-03-01")), frequency = 12)
model_name = paste('SARIMA(', best_params[1], best_params[2], best_params[3], ')(', best_params[4], best_params[5], best_params[6], ')[12]')
autoplot(t_Country, series="Data", size = 0.7) +
autolayer(fit$fitted, series= model_name, size = 0.5) +
autolayer(f_fit, series="Prediction") +
autolayer(t_Country2, series = "True Post-Pandemic") +
xlab("Year") + ylab("benzodiazepines Overdose Deaths") + ggtitle("United States") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
ggsave(paste('plots/',"US States Time benzodiazepines"),
device = "png")
US_pop_norm = (state_pop$Population[state_pop$State == 'United States']/100000)
excess = sum(as.numeric(t_Country2) - as.numeric(f_fit[["mean"]])) / US_pop_norm
lower95 = sum(as.numeric(t_Country2) - as.numeric(f_fit[["lower"]])) / US_pop_norm
upper95 = sum(as.numeric(t_Country2) - as.numeric(f_fit[["upper"]])) / US_pop_norm
excess2 = sum(as.numeric(t_Country2)[1:3] - as.numeric(f_fit[["mean"]])[1:3]) / US_pop_norm
lower952 = sum(as.numeric(t_Country2)[1:3] - as.numeric(f_fit[["lower"]])[1:3]) / US_pop_norm
upper952 = sum(as.numeric(t_Country2)[1:3] - as.numeric(f_fit[["upper"]])[1:3]) / US_pop_norm
excess2
lower952
upper952
country_1 <- read.delim("data/Heroin/Country_Month.txt")
country_2 <- read.delim("data/Heroin/Country_Month_2.txt")
country_1 = country_1[country_1$Notes == "", ]
country_2 = country_2[country_2$Notes == "" & country_2$Month.Code %in% c('2021/01', '2021/02', '2021/03', '2021/04', '2021/05', '2021/06', '2021/07', '2021/08'), ]
country = rbind(country_1, country_2)
country[country == 'Suppressed'] <- NA
country$Deaths = as.numeric(country$Deaths)
t_Country = ts(country$Deaths[1:(length(country$Deaths) - 18)], start = decimal_date(as.Date("2015-01-01")), frequency = 12)
parameters = expand.grid(p = seq(0, 2), d = seq(0, 2), q = seq(0, 1),
P = seq(0, 1), D = seq(0, 1), Q = seq(0, 1))
best_aic = 10000
for (i in seq(1, nrow(parameters))){
fit <- Arima(t_Country, order = c(parameters$p[i], parameters$d[i], parameters$q[i]),
seasonal = c(parameters$P[i], parameters$D[i], parameters$Q[i]), method="ML")
aic = fit[["aicc"]]
if (aic<best_aic){
best_aic = aic
best_fit = fit
best_params = parameters[i, ]
}
}
# fit <- Arima(t_Country, order = c(1, 1, 1),
#                      seasonal = c(1, 0, 1), method="ML")
f_fit<-forecast(best_fit, h = 18, robust = TRUE, level = 95)
# Confidence Interval Calculation Attempt 1
# sim <- matrix(NA, ncol=18,nrow=1000)
# for(i in 1:1000)
#   sim[i,] <- simulate(fit,18, future=TRUE)
# se <- apply(sim,2,sd)/sqrt(1000)
# f_fit$upper <- f_fit$mean + 1.96*se
# f_fit$lower <- f_fit$mean - 1.96*se
# Confidence Interval Attempt 2
# f_fit$upper <- f_fit$mean + 1.96*sqrt(fit$sigma2)
# f_fit$lower <- f_fit$mean - 1.96*sqrt(fit$sigma2)
t_Country2 = ts(country$Deaths[(length(country$Deaths) - 17):length(country$Deaths)], start = decimal_date(as.Date("2020-03-01")), frequency = 12)
model_name = paste('SARIMA(', best_params[1], best_params[2], best_params[3], ')(', best_params[4], best_params[5], best_params[6], ')[12]')
autoplot(t_Country, series="Data", size = 0.7) +
autolayer(fit$fitted, series= model_name, size = 0.5) +
autolayer(f_fit, series="Prediction") +
autolayer(t_Country2, series = "True Post-Pandemic") +
xlab("Year") + ylab("Heroin Overdose Deaths") + ggtitle("United States") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
ggsave(paste('plots/',"US States Time Heroin"),
device = "png")
US_pop_norm = (state_pop$Population[state_pop$State == 'United States']/100000)
excess = sum(as.numeric(t_Country2) - as.numeric(f_fit[["mean"]])) / US_pop_norm
lower95 = sum(as.numeric(t_Country2) - as.numeric(f_fit[["lower"]])) / US_pop_norm
upper95 = sum(as.numeric(t_Country2) - as.numeric(f_fit[["upper"]])) / US_pop_norm
excess2 = sum(as.numeric(t_Country2)[1:4] - as.numeric(f_fit[["mean"]])[1:4]) / US_pop_norm
lower952 = sum(as.numeric(t_Country2)[1:4] - as.numeric(f_fit[["lower"]])[1:4]) / US_pop_norm
upper952 = sum(as.numeric(t_Country2)[1:4] - as.numeric(f_fit[["upper"]])[1:4]) / US_pop_norm
US_pop_norm = (state_pop$Population[state_pop$State == 'United States']/100000)
excess = sum(as.numeric(t_Country2) - as.numeric(f_fit[["mean"]])) / US_pop_norm
lower95 = sum(as.numeric(t_Country2) - as.numeric(f_fit[["lower"]])) / US_pop_norm
upper95 = sum(as.numeric(t_Country2) - as.numeric(f_fit[["upper"]])) / US_pop_norm
excess2 = sum(as.numeric(t_Country2)[1:3] - as.numeric(f_fit[["mean"]])[1:3]) / US_pop_norm
lower952 = sum(as.numeric(t_Country2)[1:3] - as.numeric(f_fit[["lower"]])[1:3]) / US_pop_norm
upper952 = sum(as.numeric(t_Country2)[1:3] - as.numeric(f_fit[["upper"]])[1:3]) / US_pop_norm
excess2
lower952
upper952
country_1 <- read.delim("data/SemiSynthetic/Country_Month.txt")
country_2 <- read.delim("data/SemiSynthetic/Country_Month_2.txt")
country_1 = country_1[country_1$Notes == "", ]
country_2 = country_2[country_2$Notes == "" & country_2$Month.Code %in% c('2021/01', '2021/02', '2021/03', '2021/04', '2021/05', '2021/06', '2021/07', '2021/08'), ]
country = rbind(country_1, country_2)
country[country == 'Suppressed'] <- NA
country$Deaths = as.numeric(country$Deaths)
t_Country = ts(country$Deaths[1:(length(country$Deaths) - 18)], start = decimal_date(as.Date("2015-01-01")), frequency = 12)
parameters = expand.grid(p = seq(0, 2), d = seq(0, 2), q = seq(0, 1),
P = seq(0, 1), D = seq(0, 1), Q = seq(0, 1))
best_aic = 10000
for (i in seq(1, nrow(parameters))){
fit <- Arima(t_Country, order = c(parameters$p[i], parameters$d[i], parameters$q[i]),
seasonal = c(parameters$P[i], parameters$D[i], parameters$Q[i]), method="ML")
aic = fit[["aicc"]]
if (aic<best_aic){
best_aic = aic
best_fit = fit
best_params = parameters[i, ]
}
}
# fit <- Arima(t_Country, order = c(1, 1, 1),
#                      seasonal = c(1, 0, 1), method="ML")
f_fit<-forecast(best_fit, h = 18, robust = TRUE, level = 95)
# Confidence Interval Calculation Attempt 1
# sim <- matrix(NA, ncol=18,nrow=1000)
# for(i in 1:1000)
#   sim[i,] <- simulate(fit,18, future=TRUE)
# se <- apply(sim,2,sd)/sqrt(1000)
# f_fit$upper <- f_fit$mean + 1.96*se
# f_fit$lower <- f_fit$mean - 1.96*se
# Confidence Interval Attempt 2
# f_fit$upper <- f_fit$mean + 1.96*sqrt(fit$sigma2)
# f_fit$lower <- f_fit$mean - 1.96*sqrt(fit$sigma2)
t_Country2 = ts(country$Deaths[(length(country$Deaths) - 17):length(country$Deaths)], start = decimal_date(as.Date("2020-03-01")), frequency = 12)
model_name = paste('SARIMA(', best_params[1], best_params[2], best_params[3], ')(', best_params[4], best_params[5], best_params[6], ')[12]')
autoplot(t_Country, series="Data", size = 0.7) +
autolayer(fit$fitted, series= model_name, size = 0.5) +
autolayer(f_fit, series="Prediction") +
autolayer(t_Country2, series = "True Post-Pandemic") +
xlab("Year") + ylab("Natural and Semi-Synthetic Opioid Overdose Deaths") + ggtitle("United States") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
ggsave(paste('plots/',"US States Time Semi"),
device = "png")
US_pop_norm = (state_pop$Population[state_pop$State == 'United States']/100000)
excess = sum(as.numeric(t_Country2) - as.numeric(f_fit[["mean"]])) / US_pop_norm
lower95 = sum(as.numeric(t_Country2) - as.numeric(f_fit[["lower"]])) / US_pop_norm
upper95 = sum(as.numeric(t_Country2) - as.numeric(f_fit[["upper"]])) / US_pop_norm
excess2 = sum(as.numeric(t_Country2)[1:3] - as.numeric(f_fit[["mean"]])[1:3]) / US_pop_norm
lower952 = sum(as.numeric(t_Country2)[1:3] - as.numeric(f_fit[["lower"]])[1:3]) / US_pop_norm
upper952 = sum(as.numeric(t_Country2)[1:3] - as.numeric(f_fit[["upper"]])[1:3]) / US_pop_norm
excess2
lower952
upper952
View(df_excess)
View(df_excess_acs)
View(df_excess_dem)
View(df_excess_county)
View(df_excess)
View(df_excess_county)
View(df_excess)
View(df_excess_meth)
View(df_excess_her)
View(df_excess_dem)
View(df_excess_alc)
View(df_excess_acs)
View(df_excess)
View(df_excess_time)
state_names = as.character(unique(state$State))
df_months <- data.frame(matrix(nrow = 51, ncol = 2))
colnames(df_excess) <- c('State', 'Number of Months')
for (i in seq(1, length(state_names))){
state_name = state_names[i]
cases = cases_state_month[cases_state_month$state == state_name, 2:ncol(cases_state_month)]
State_data = state %>% filter(State == state_name)
State_data[State_data == 'Suppressed'] <- NA
State_data$Deaths = as.numeric(levels(State_data$Deaths))[State_data$Deaths]
t_State = ts(State_data$Deaths[1:(length(State_data$Deaths) - 18)], start = decimal_date(as.Date("2015-01-01")), frequency = 12)
parameters = expand.grid(p = seq(0, 1), d = seq(0, 1), q = seq(0, 1),
P = seq(0, 1), D = seq(0, 1), Q = seq(0, 1))
best_aic = 10000
for (j in seq(1, nrow(parameters))){
fit <- tryCatch(
{
Arima(t_State, order = c(parameters$p[j], parameters$d[j], parameters$q[j]),
seasonal = c(parameters$P[j], parameters$D[j], parameters$Q[j]), method="ML")
},
error = function(e){
tryCatch(
{
Arima(t_State, order = c(1, 1, 0),
seasonal = c(1, 0, 1), method="ML")
},
error = function(e){
Arima(t_State, order = c(1, 0, 0),
seasonal = c(0, 0, 1), method="ML")
})
})
aic = fit[["aicc"]]
if (aic<best_aic){
best_aic = aic
best_fit = fit
best_params = parameters[j, ]
}
}
f_fit<-forecast(best_fit, robust = TRUE, h = 18, level = 95)
t_State2 = ts(State_data$Deaths[(length(State_data$Deaths) - 17):length(State_data$Deaths)], start = decimal_date(as.Date("2020-03-01")), frequency = 12)
upper95 = as.numeric(t_State2) - as.numeric(f_fit[["upper"]])
num_months = sum(upper95 > 0)
df_months [i, ] = c(state_name, num_months)
}
library(dplyr)
library(tseries)
library(forecast)
library(ggplot2)
library(lubridate)
library(tscount)
library(gridExtra)
library(usmap)
library(ggthemes)
library(readxl)
library(stringr)
library(pracma)
library(maps)
library(mapdata)
state_names = as.character(unique(state$State))
df_months <- data.frame(matrix(nrow = 51, ncol = 2))
colnames(df_excess) <- c('State', 'Number of Months')
for (i in seq(1, length(state_names))){
state_name = state_names[i]
cases = cases_state_month[cases_state_month$state == state_name, 2:ncol(cases_state_month)]
State_data = state %>% filter(State == state_name)
State_data[State_data == 'Suppressed'] <- NA
State_data$Deaths = as.numeric(levels(State_data$Deaths))[State_data$Deaths]
t_State = ts(State_data$Deaths[1:(length(State_data$Deaths) - 18)], start = decimal_date(as.Date("2015-01-01")), frequency = 12)
parameters = expand.grid(p = seq(0, 1), d = seq(0, 1), q = seq(0, 1),
P = seq(0, 1), D = seq(0, 1), Q = seq(0, 1))
best_aic = 10000
for (j in seq(1, nrow(parameters))){
fit <- tryCatch(
{
Arima(t_State, order = c(parameters$p[j], parameters$d[j], parameters$q[j]),
seasonal = c(parameters$P[j], parameters$D[j], parameters$Q[j]), method="ML")
},
error = function(e){
tryCatch(
{
Arima(t_State, order = c(1, 1, 0),
seasonal = c(1, 0, 1), method="ML")
},
error = function(e){
Arima(t_State, order = c(1, 0, 0),
seasonal = c(0, 0, 1), method="ML")
})
})
aic = fit[["aicc"]]
if (aic<best_aic){
best_aic = aic
best_fit = fit
best_params = parameters[j, ]
}
}
f_fit<-forecast(best_fit, robust = TRUE, h = 18, level = 95)
t_State2 = ts(State_data$Deaths[(length(State_data$Deaths) - 17):length(State_data$Deaths)], start = decimal_date(as.Date("2020-03-01")), frequency = 12)
upper95 = as.numeric(t_State2) - as.numeric(f_fit[["upper"]])
num_months = sum(upper95 > 0)
df_months [i, ] = c(state_name, num_months)
}
State_data$Deaths
country_1 <- read.delim("data/Year.txt")
country_2 <- read.delim("data/Year_2.txt")
state_1 <- read.delim("data/State_Month.txt")
state_2 <- read.delim("data/State_Month_2.txt")
county_1 <- read.delim("data/County_Year.txt")
county_2 <- read.delim("data/County_Year_2.txt")
state_pop <- read.csv('data/State_Population.csv')
colnames(state_pop) <- c('State', 'Population', 'Drop1', 'Drop2')
state_pop = state_pop %>% select('State', 'Population')
state_pop$Population = as.numeric(gsub(",","",state_pop$Population))
cnames = c("County", "Pop", "Pop_2", "Pop_3")
county_pop <- read_excel('data/County_Population.xlsx', col_names = cnames, skip = 3)
county_pop = na.omit(county_pop)
county_pop[ , 'fips'] <- rep("NA", nrow(county_pop))
state_1 = state_1[state_1$Notes == "", ]
state_2 = state_2[state_2$Notes == "" & state_2$Month.Code %in% c('2021/01', '2021/02', '2021/03', '2021/04', '2021/05', '2021/06', '2021/07', '2021/08'), ]
colnames(state_2)[2] <- 'State'
colnames(state_2)[3] <- 'State.Code'
state = rbind(state_1, state_2)
state_names = as.character(unique(state$State))
df_months <- data.frame(matrix(nrow = 51, ncol = 2))
colnames(df_excess) <- c('State', 'Number of Months')
for (i in seq(1, length(state_names))){
state_name = state_names[i]
cases = cases_state_month[cases_state_month$state == state_name, 2:ncol(cases_state_month)]
State_data = state %>% filter(State == state_name)
State_data[State_data == 'Suppressed'] <- NA
State_data$Deaths = as.numeric(levels(State_data$Deaths))[State_data$Deaths]
t_State = ts(State_data$Deaths[1:(length(State_data$Deaths) - 18)], start = decimal_date(as.Date("2015-01-01")), frequency = 12)
parameters = expand.grid(p = seq(0, 1), d = seq(0, 1), q = seq(0, 1),
P = seq(0, 1), D = seq(0, 1), Q = seq(0, 1))
best_aic = 10000
for (j in seq(1, nrow(parameters))){
fit <- tryCatch(
{
Arima(t_State, order = c(parameters$p[j], parameters$d[j], parameters$q[j]),
seasonal = c(parameters$P[j], parameters$D[j], parameters$Q[j]), method="ML")
},
error = function(e){
tryCatch(
{
Arima(t_State, order = c(1, 1, 0),
seasonal = c(1, 0, 1), method="ML")
},
error = function(e){
Arima(t_State, order = c(1, 0, 0),
seasonal = c(0, 0, 1), method="ML")
})
})
aic = fit[["aicc"]]
if (aic<best_aic){
best_aic = aic
best_fit = fit
best_params = parameters[j, ]
}
}
f_fit<-forecast(best_fit, robust = TRUE, h = 18, level = 95)
t_State2 = ts(State_data$Deaths[(length(State_data$Deaths) - 17):length(State_data$Deaths)], start = decimal_date(as.Date("2020-03-01")), frequency = 12)
upper95 = as.numeric(t_State2) - as.numeric(f_fit[["upper"]])
num_months = sum(upper95 > 0)
df_months [i, ] = c(state_name, num_months)
}
View(df_months)
t_State
t_State2
View(df_months)
df_months$X2 <= 5
sum (df_months$X2 <= 5)
sum (df_months$X2 <= 5, na.rm = T)
df_months$X2 <= 5
df_months$X2
as.numeric(df_months$X2) >= 5
as.numeric(df_months$X2) <= 5
sum(as.numeric(df_months$X2) <= 5, na.rm = T)
sum(as.numeric(df_months$X2) == 0, na.rm = T)
sum(as.numeric(df_months$X2) < 5, na.rm = T)
sum(as.numeric(df_months$X2) != 0, na.rm = T)
sum(as.numeric(df_months$X2) < 3, na.rm = T)
sum(as.numeric(df_months$X2) < 4, na.rm = T)
sum(as.numeric(df_months$X2) < 5, na.rm = T)
View(df_excess_alc)
View(df_excess)
colnames(df_excess) <- c('State', 'Excess', 'Lower95', 'Upper95', 'Excess_2', 'Lower95_2', 'Upper95_2', 'correlation')
View(df_excess)
View(df_excess)
df_svi <- read.csv('data/SVI2018_US_COUNTY.csv')
for (row in 1:nrow(df_svi)){
if (nchar(df_svi[row, 'FIPS']) == 4){
newChar = paste0("0", df_svi[row, 'FIPS'])
df_svi[row, 'FIPS'] = newChar
}
}
View(df_svi)
df_svi[977, ]
df_svi[740, ]
df_svi[240, ]
View(df_svi)
df_svi[2115, ]
df_svi[455, ]
View(df_months)
as.numeric(df_months$X2) < 4
sum(as.numeric(df_months$X2) < 4, na.rm = T)
sum(as.numeric(df_months$X2) < 5, na.rm = T)
sum(as.numeric(df_months$X2) < 3, na.rm = T)
sum(as.numeric(df_months$X2) == 0, na.rm = T)
sum(as.numeric(df_months$X2) > 0, na.rm = T)
sum(as.numeric(df_months$X2) < 3, na.rm = T)
sum(as.numeric(df_months$X2) < 4, na.rm = T)

ggtitle("State Excess Deaths per 100,000 Persons")+
theme_clean()
vert_plot
ggsave(paste('plots/',"Vertical Plot Loess"),
device = "png", width = 7, height = 9)
# Preprocessing
county = county_1[county_1$Notes == "", ]
# Not Including 2021 for now
# county_2 = county_2[county_2$Notes == "" & county_2$Year.Code == 2021, ]
# colnames(county_2)[2] <- 'County'
# colnames(county_2)[3] <- 'County.Code'
# county = rbind(county_1, county_2)
'%!in%' <- function(x,y)!('%in%'(x,y))
#Remove 2010, 2011 data to get more counties
# county = county[(county$Year != '2010')&(county$Year != '2011'),]
ridCode = unique(county$County.Code[(county$Deaths == 'Suppressed')|(county$Deaths == 'Missing')])
county = county[county$County.Code %!in% ridCode, ]
county$Deaths = as.numeric(levels(county$Deaths))[county$Deaths]
# finds fips code from county names
for (row in 1:nrow(county_pop)) {
if (row %% 100 == 0){
print(row)
}
name <- county_pop[row, "County"]
name = name$County
name <- substr(name, 2, nchar(name))
name <- strsplit(name, ', ', fixed=T)
tryfips <- tryCatch({
fips(state = name[[1]][2], county = name[[1]][1])
},
error = function(e){
NA
})
county_pop[row, 'fips'] <- tryfips
}
# Preprocessing
county = county_1[county_1$Notes == "", ]
# Not Including 2021 for now
# county_2 = county_2[county_2$Notes == "" & county_2$Year.Code == 2021, ]
# colnames(county_2)[2] <- 'County'
# colnames(county_2)[3] <- 'County.Code'
# county = rbind(county_1, county_2)
'%!in%' <- function(x,y)!('%in%'(x,y))
#Remove 2010, 2011 data to get more counties
# county = county[(county$Year != '2010')&(county$Year != '2011'),]
ridCode = unique(county$County.Code[(county$Deaths == 'Suppressed')|(county$Deaths == 'Missing')])
county = county[county$County.Code %!in% ridCode, ]
county$Deaths = as.numeric(levels(county$Deaths))[county$Deaths]
county_codes = unique(county$County.Code)
df_excess_county <- data.frame(matrix(nrow = length(county_codes), ncol = 5))
colnames(df_excess_county) <- c('County', 'Code', 'Excess', 'Lower95', 'Upper95')
j = 1
for (i in county_codes){
county_data = county %>% filter(County.Code == i)
t_county = ts(county_data$Deaths[1:(length(county_data$Deaths) -1)], start = decimal_date(as.Date("2010-01-01")))
fit <- tryCatch({
Arima(t_county, order = c(1, 1, 1), method="ML")
},
error = function(e){
Arima(t_county, order = c(2, 2, 2), method="ML")
})
f_fit<-forecast(fit, robust = TRUE, h = 1, level = 95)
true_2020 = county_data$Deaths[length(county_data$Deaths)]
g<-autoplot(t_county, series="Data") +
autolayer(fit$fitted, series="SARIMA") +
autolayer(f_fit, series="Prediction") +
xlab("Year") + ylab("Drug Overdose Deaths") + ggtitle(as.character(unique(county_data$County))) + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom") +
geom_point(aes(x=2020, y=true_2020), colour="blue")
ggsave(paste('plots/counties/',as.character(unique(county_data$County))),
plot = g,
device = "png")
excess = as.numeric(true_2020) - as.numeric(f_fit[["mean"]])
lower95 = as.numeric(true_2020) - as.numeric(f_fit[["lower"]])
upper95 = as.numeric(true_2020) - as.numeric(f_fit[["upper"]])
df_excess_county[j, ] = c(as.character(unique(county_data$County)), i, excess, lower95, upper95)
j = j + 1
}
# Edit and Merge on FIPS
for (row in 1:nrow(df_excess_county)){
if (nchar(df_excess_county[row, 'Code']) == 4){
newChar = paste0("0", df_excess_county[row, 'Code'])
df_excess_county[row, 'Code'] = newChar
}
}
df_excess_county <- merge(df_excess_county, county_pop, by.x = 'Code', by.y = 'fips')
# Pop Normalization
df_excess_county = df_excess_county %>% mutate(Excess_pop = as.numeric(Excess)/(Pop/100000), Lower95_pop = as.numeric(Lower95)/(Pop/100000), Upper95_pop = as.numeric(Upper95)/(Pop/100000))
colnames(df_excess_county)[1] = 'fips'
colnames(df_excess_county)[2] = 'County'
# County Level US plot
plot_usmap(data = df_excess_county, values = "Excess_pop", color = "black") +
scale_fill_viridis_c(option= "magma", name = "Excess Deaths Per 100,000 Persons", label = scales::comma, na.value = "white") +
labs(title = "County-Level Excess Deaths Estimates") +
theme(legend.position = "right")
ggsave(paste('plots/',"US Map Counties"),
device = "png")
df_excess_county = df_excess_county[order(df_excess_county$Excess_pop, decreasing = T),]
df_excess_county$County = factor(df_excess_county$County, levels=df_excess_county[order(df_excess_county$Excess_pop), "County"])
vert_plot <- ggplot(
df_excess_county[1:50,],
aes(x = Excess_pop,xmin = Upper95_pop,xmax = Lower95_pop, y = County)) +
geom_errorbarh(height = .2,
position = position_dodge(width = .7),
alpha = .9) +
geom_point(position = position_dodge(width = .7),
alpha = .9) +
geom_vline(xintercept = 0,
color = "black",
alpha = .7) +
ggtitle("County Excess Deaths per 100,000 Persons")+
theme_clean()
vert_plot
ggsave(paste('plots/',"Vertical Plot County"),
device = "png", width = 7, height = 9)
county_data = county %>% filter(County.Code == "54099")
loess_model <- loess(county_data$Deaths[1:(length(county_data$Deaths) -1)] ~ as.numeric(1:(length(county_data$Deaths)-1)), control = loess.control(surface = "direct"))
fit_loess = predict(loess_model,se=TRUE)
predict_loess = predict(loess_model,as.numeric((length(county_data$Deaths) + 1):(length(county_data$Deaths) + 1)), se = TRUE)
x = linspace(2010, 2020, length(county_data$Deaths))
df_plots <- data.frame(matrix(nrow = length(county_data$Deaths), ncol = 4))
colnames(df_plots) <- c('x', 'mean', 'upper', 'lower')
df_plots$x <- x
df_plots$mean = c(fit_loess$fit, predict_loess$fit)
df_plots$lower = c((fit_loess$fit - 1.96*fit_loess$se.fit), (predict_loess$fit - 1.96*predict_loess$se.fit))
df_plots$upper = c((fit_loess$fit + 1.96*fit_loess$se.fit), (predict_loess$fit + 1.96*predict_loess$se.fit))
df_plots$actual = county_data$Deaths
ggplot(df_plots, aes(x=x,y=mean, ymin=lower, ymax=upper)) +
geom_line() +
geom_ribbon(alpha=0.3) +
geom_point(aes(y=actual)) +
theme_bw() + ggtitle(as.character(unique(county_data$County))) + ylab('Deaths') + xlab('Years') +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))
ccvi_state <- read_excel('data/surgo_ccvi/ccvi.xlsx')
ccvi_state$stateName <- str_to_title(ccvi_state$stateName)
ccvi_state$stateName[9] = "District of Columbia"
df_excess_predictors <- merge(df_excess, ccvi_state, by.x = 'state', by.y = 'stateName')
df_excess_predictors <- merge(df_excess_predictors, state_pop, by.x = 'state', by.y = 'State')
# Try both Excess_pop 2 and Excess_pop
wls_model_ccvi <- lm(Excess_pop_2 ~ theme1 + theme2 + theme3 + theme5 + theme6 +theme7, data = df_excess_predictors, weights = log(Population.x))
summary(wls_model_ccvi)
ccvi_indicators <- read_excel('data/surgo_ccvi/ccvi_county_raw_indicators_public.xlsx')
ccvi_county <- read_excel('data/surgo_ccvi/ccvi.xlsx', sheet = 'ccvi-US-county')
ccvi_county$FIPS = as.character(ccvi_county$FIPS)
ccvi_indicators$FIPS = as.character(ccvi_indicators$FIPS)
for (row in 1:nrow(ccvi_county)){
if (nchar(ccvi_county[row, 'FIPS']) == 4){
newChar = paste0("0", ccvi_county[row, 'FIPS'])
ccvi_county[row, 'FIPS'] = newChar
}
}
for (row in 1:nrow(ccvi_indicators)){
if (nchar(ccvi_indicators[row, 'FIPS']) == 4){
newChar = paste0("0", ccvi_indicators[row, 'FIPS'])
ccvi_indicators[row, 'FIPS'] = newChar
}
}
df_excess_predictors_county <- merge(df_excess_county, ccvi_county, by.x = 'fips', by.y = 'FIPS')
df_excess_predictors_county <- merge(df_excess_predictors_county, ccvi_indicators, by.x = 'fips', by.y = 'FIPS')
wls_model_ccvi_county <- lm(Excess_pop ~ theme1 + theme2 + theme3 + theme5 + theme6 +theme7, data = df_excess_predictors_county, weights = log(Pop))
summary(wls_model_ccvi_county)
wls_model_ccvi_county <- lm(Excess_pop ~ theme1 + theme2 + theme3 + theme5 + theme6 +theme7, data = df_excess_predictors_county, weights = log(Pop))
summary(wls_model_ccvi_county)
wls_model_ccvi_county <- lm(Excess_pop ~ ccvi, data = df_excess_predictors_county, weights = log(Pop))
summary(wls_model_ccvi_county)
wls_model_ccvi_county <- lm(Excess_pop ~ ses_EP_POV + ses_EP_UNEMP + ses_EP_PCI + ses_EP_NOHSDP + ses_EP_UNINSUR + ms_EP_MINRTY + hh_EP_CROWD + pm_EP_AGE65 + hc_icu_capita + hc_hosp_beds_capita + hc_PHEP_capita + hc_spend_capita + hc_epi_capita + hc_health_labs_capita + hc_emer_services_capita + hc_pqi + hh_EP_SNGPNT + hh_EP_AGE17, data = df_excess_predictors_county, weights = log(Pop))
summary(wls_model_ccvi_county)
# Import dataset shared by Prof Therriault
df_dem <- read.csv('data/dem_data.csv')
df_dem$County = as.character(levels(df_dem$County))[df_dem$County]
df_dem$State = as.character(levels(df_dem$State))[df_dem$State]
for (row in 1:nrow(df_dem)) {
if (row %% 100 == 0){
print(row)
}
cname <- df_dem[row, "County"]
sname = df_dem[row, "State"]
tryfips <- tryCatch({
fips(state = substring(sname, 2, nchar(sname)), county = cname)
},
error = function(e){
NA
})
df_dem[row, 'fips'] <- tryfips
}
df_excess_dem = merge(df_excess_county, df_dem, by = 'fips')
df_excess_dem <- subset (df_excess_dem , select = -County.y)
colnames(df_excess_dem)[2] <- 'county'
df_excess_dem = df_excess_dem[order(df_excess_dem$black_pct, decreasing = T),]
b <- df_excess_dem$Excess_pop[1:20]
df_excess_dem = df_excess_dem[order(df_excess_dem$white_pct, decreasing = T),]
w <- df_excess_dem$Excess_pop[1:20]
df_excess_dem = df_excess_dem[order(df_excess_dem$aian_pct, decreasing = T),]
aian <- df_excess_dem$Excess_pop[1:20]
df_excess_dem = df_excess_dem[order(df_excess_dem$nhpi_pct, decreasing = T),]
nh <- df_excess_dem$Excess_pop[1:20]
df_top_race <- data.frame(
values = c(b, w, aian, nh),
Race = rep(c("Black", "White", "American Indian and Alaskan Native", "Native Hawaiin and Pacific Islander"), each = 20)
)
ggplot(df_top_race, aes(x = values, fill = Race)) + geom_density(alpha = 0.5) + theme_clean()+
xlab('Drug-Related Excess Mortality per 100,000 Persons')
# Key	New Names
# 1	Exurbs
# 2	Graying America
# 3	African American South
# 4	Evangelical Hubs
# 5	Working Class Country
# 6	Military Posts
# 7	Urban Suburbs
# 8	Hispanic Centers
# 9	Native American Lands
# 10	Rural Middle America
# 11	College Towns
# 12	LDS Enclaves
# 13	Aging Farmlands
# 14	Big Cities
# 15	Middle Suburbs
acs_names = c('Exurbs', 'Graying America', 'African American South', 'Evangelical Hubs', 'Working Class Country', 'Military Posts', 'Urban Suburbs', 'Hispanic Centers', 'Native American Lands', 'Rural Middle America', 'College Towns', 'LDS Enclaves', 'Aging Farmlands', 'Big Cities', 'Middle Suburbs')
# Calculate Mean and SD for each County Type
acs <- read_excel('data/County-Type.xlsx')
acs$fips = as.character(acs$fips)
for (row in 1:nrow(acs)){
if (nchar(acs[row, 'fips']) == 4){
newChar = paste0("0", acs[row, 'fips'])
acs[row, 'fips'] = newChar
}
}
df_excess_acs = merge(df_excess_county, acs, by = 'fips')
df_excess_acs <- subset (df_excess_acs, select = -County.y)
df_mean_acs = df_excess_acs %>%  group_by(Type_Number) %>% summarise(mean = mean(Excess_pop), sd = sd(Excess_pop))
df_mean_acs$Type_Number = as.factor(df_mean_acs$Type_Number)
# Plot results
p<-ggplot(data=df_mean_acs, aes(x=Type_Number, y=mean)) +
geom_bar(stat="identity", fill="steelblue") +
xlab('County Type') +
ylab('Mean Excess Deaths per 100,000')+
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.1,
position=position_dodge(.9)) +
scale_x_discrete(breaks=c("1","2","3", '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'), labels=acs_names) +
coord_flip() +
theme_clean()
p
ggsave(paste('plots/',"ACP Excess"),
device = "png")
state_1 <- read.delim("data/All Opioids/State_Month.txt")
state_2 <- read.delim("data/All Opioids/State_Month_2.txt")
state_1 = state_1[state_1$Notes == "", ]
state_2 = state_2[state_2$Notes == "" & state_2$Month.Code %in% c('2021/01', '2021/02', '2021/03', '2021/04', '2021/05', '2021/06', '2021/07', '2021/08'), ]
colnames(state_2)[2] <- 'State'
colnames(state_2)[3] <- 'State.Code'
state = rbind(state_1, state_2)
library(dplyr)
library(tseries)
library(ggfortify)
library(forecast)
library(lubridate)
library(excessmort)
library(tscount)
library(gridExtra)
library(usmap)
library(ggthemes)
library(readxl)
library(stringr)
library(pracma)
country_1 <- read.delim("data/Year.txt")
country_2 <- read.delim("data/Year_2.txt")
state_1 <- read.delim("data/State_Month.txt")
state_2 <- read.delim("data/State_Month_2.txt")
county_1 <- read.delim("data/County_Year.txt")
county_2 <- read.delim("data/County_Year_2.txt")
state_pop <- read.csv('data/State_Population.csv')
colnames(state_pop) <- c('State', 'Population', 'Drop1', 'Drop2')
state_pop = state_pop %>% select('State', 'Population')
state_pop$Population = as.numeric(gsub(",","",state_pop$Population))
cnames = c("County", "Pop", "Pop_2", "Pop_3")
county_pop <- read_excel('data/County_Population.xlsx', col_names = cnames, skip = 3)
county_pop = na.omit(county_pop)
county_pop[ , 'fips'] <- rep("NA", nrow(county_pop))
# COVID-19 Data
cases = read.csv('data/cases.csv')
cases = subset (cases, select = -c(UID, iso2, iso3, code3, FIPS, Admin2, Country_Region, Lat, Long_, Combined_Key))
cases_state <- cases %>% group_by(Province_State) %>% summarise(across(everything(), sum))
# Edits COVID-19 Dataframe so that it only includes the data at montthy level
cases_state_month <- data.frame(matrix(NA,    # Create empty data frame
nrow = nrow(cases_state),
ncol = 0))
cases_state_month["state"] = cases_state["Province_State"]
indexM = vector()
startMonthP = "1."
for (i in seq(2, ncol(cases_state))){
startMonth = substring(colnames(cases_state)[i], 2, 3)
if (startMonth == startMonthP){
indexM = c(indexM, i)
}
else{
newData = cases_state[, indexM]
newCol = newData[, ncol(newData)] - newData[, 1]
cases_state_month[paste0(substring(colnames(cases_state)[i-1], 2, 3), substring(colnames(cases_state)[i-1], nchar(colnames(cases_state)[i-1]) - 1, nchar(colnames(cases_state)[i-1])))] = newCol
startMonth = substring(colnames(cases_state)[i], 2, 3)
startMonthP = startMonth
indexM = c(i)
}
}
cases_state_month = cases_state_month[, c(1, 4:(ncol(cases_state_month)-7))]
# finds fips code from county names
for (row in 1:nrow(county_pop)) {
if (row %% 100 == 0){
print(row)
}
name <- county_pop[row, "County"]
name = name$County
name <- substr(name, 2, nchar(name))
name <- strsplit(name, ', ', fixed=T)
tryfips <- tryCatch({
fips(state = name[[1]][2], county = name[[1]][1])
},
error = function(e){
NA
})
county_pop[row, 'fips'] <- tryfips
}
state_1 = state_1[state_1$Notes == "", ]
state_2 = state_2[state_2$Notes == "" & state_2$Month.Code %in% c('2021/01', '2021/02', '2021/03', '2021/04', '2021/05', '2021/06', '2021/07', '2021/08'), ]
colnames(state_2)[2] <- 'State'
colnames(state_2)[3] <- 'State.Code'
state = rbind(state_1, state_2)
country_1 = country_1[country_1$Notes == "", ]
country_2 = country_2[country_2$Notes == "" & country_2$Month.Code %in% c('2021/01', '2021/02', '2021/03', '2021/04', '2021/05', '2021/06', '2021/07', '2021/08'), ]
country = rbind(country_1, country_2)
# Forecasting at the national level drug-related
country[country == 'Suppressed'] <- NA
country$Deaths = as.numeric(country$Deaths)
t_Country = ts(country$Deaths[1:(length(country$Deaths) - 18)], start = decimal_date(as.Date("2015-01-01")), frequency = 12)
parameters = expand.grid(p = seq(0, 2), d = seq(0, 2), q = seq(0, 1),
P = seq(0, 1), D = seq(0, 1), Q = seq(0, 1))
best_aic = 10000
for (i in seq(1, nrow(parameters))){
fit <- Arima(t_Country, order = c(parameters$p[i], parameters$d[i], parameters$q[i]),
seasonal = c(parameters$P[i], parameters$D[i], parameters$Q[i]), method="ML")
aic = fit[["aicc"]]
if (aic<best_aic){
best_aic = aic
best_fit = fit
best_params = parameters[i, ]
}
}
# fit <- Arima(t_Country, order = c(1, 1, 1),
#                      seasonal = c(1, 0, 1), method="ML")
f_fit<-forecast(best_fit, h = 18, robust = TRUE, level = 95)
# Confidence Interval Calculation Attempt 1
# sim <- matrix(NA, ncol=18,nrow=1000)
# for(i in 1:1000)
#   sim[i,] <- simulate(fit,18, future=TRUE)
# se <- apply(sim,2,sd)/sqrt(1000)
# f_fit$upper <- f_fit$mean + 1.96*se
# f_fit$lower <- f_fit$mean - 1.96*se
# Confidence Interval Attempt 2
# f_fit$upper <- f_fit$mean + 1.96*sqrt(fit$sigma2)
# f_fit$lower <- f_fit$mean - 1.96*sqrt(fit$sigma2)
t_Country2 = ts(country$Deaths[(length(country$Deaths) - 17):length(country$Deaths)], start = decimal_date(as.Date("2020-03-01")), frequency = 12)
model_name = paste('SARIMA(', best_params[1], best_params[2], best_params[3], ')(', best_params[4], best_params[5], best_params[6], ')[12]')
autoplot(t_Country, series="Data", size = 0.7) +
autolayer(fit$fitted, series= model_name, size = 0.5) +
autolayer(f_fit, series="Prediction") +
autolayer(t_Country2, series = "True Pandemic") +
xlab("Year") + ylab("Drug Overdose Deaths") + ggtitle("United States") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
library(dplyr)
library(ggfortify)
library(gridExtra)
library(ggthemes)
library(readxl)
library(stringr)
library(pracma)
df <- read_excel('all_papers_new_format_version_7_kab.xlsx')
df_pollutants_1 = data.frame(matrix(nrow = 14, ncol = 4))
polNames <- colnames(df)[19:25]
colnames (df_pollutants_1) = c('Value', 'Pollutant', 'Type', "Percent")
# columns 19 to 25 are pollutants
j = 1
k = 1
for (i in seq(19, 25)){
df_pollutants_1[j, 1] = nrow(df[(df[, i] != 0 & df[, i] == 2 & df$`Temporal Extent` == 1), ])
df_pollutants_1[j, 2] = polNames[k]
df_pollutants_1[j, 3] = "Papers Reporting Significant Results"
j = j + 1
df_pollutants_1[j, 1] = nrow(df[df[, i] != 0 & df[, i] == 1 & df$`Temporal Extent` == 1 & df$`Temporal Extent` == 1, ])
df_pollutants_1[j, 2] = polNames[k]
df_pollutants_1[j, 3] = "All Papers"
df_pollutants_1[j-1, 4] = round((df_pollutants_1[j-1, 1]/(df_pollutants_1[j-1, 1] + df_pollutants_1[j, 1])) * 100)
j = j + 1
k = k + 1
}
df_pollutants_2_3 = data.frame(matrix(nrow = 14, ncol = 4))
polNames <- colnames(df)[19:25]
colnames (df_pollutants_2_3) = c('Value', 'Pollutant', 'Type', "Percent")
# columns 19 to 25 are pollutants
j = 1
k = 1
for (i in seq(19, 25)){
df_pollutants_2_3[j, 1] = nrow(df[(df[, i] != 0 & df[, i] == 2 & (df$`Temporal Extent` == 2 | df$`Temporal Extent` == 3)), ])
df_pollutants_2_3[j, 2] = polNames[k]
df_pollutants_2_3[j, 3] = "Papers Reporting Significant Results"
j = j + 1
df_pollutants_2_3[j, 1] = nrow(df[df[, i] != 0 & df[, i] == 1 & (df$`Temporal Extent` == 2 | df$`Temporal Extent` == 3), ])
df_pollutants_2_3[j, 2] = polNames[k]
df_pollutants_2_3[j, 3] = "All Papers"
df_pollutants_2_3[j-1, 4] = round((df_pollutants_2_3[j-1, 1]/(df_pollutants_2_3[j-1, 1] + df_pollutants_2_3[j, 1])) * 100)
j = j + 1
k = k + 1
}
# Stacked barplot with multiple groups
ggplot(data=df_pollutants_1, aes(x=Pollutant, y= Value, fill=Type)) +
geom_bar(stat="identity")+ ylab('# of Papers') +
geom_text(aes(label=Percent), vjust=1.6,
color="white", size=3.5) +
theme_clean() + theme(legend.position="bottom", legend.title = element_blank()) +
scale_y_continuous(name='# of Papers', breaks = c(10, 20, 30, 40, 50, 60), limits=c(0, 60))
ggsave(paste("Long Term Papers"),
device = "png")
# Stacked barplot with multiple groups
ggplot(data=df_pollutants_2_3, aes(x=Pollutant, y= Value, fill=Type)) +
geom_bar(stat="identity")+ ylab('# of Papers') +
geom_text(aes(label=Percent), vjust=1.6,
color="white", size=3.5) +
theme_clean() + theme(legend.position="bottom", legend.title = element_blank()) +
scale_y_continuous(name='# of Papers', breaks = c(10, 20, 30, 40, 50, 60), limits=c(0, 60))
ggsave(paste("Short Term Papers"),
device = "png")
count1 = 0
count2 = 0
for (i in seq(1, nrow(df))){
if (df[i, 19] == 2 |df[i, 20] == 2| df[i, 21] == 2| df[i, 22] == 2 | df[i, 23] == 2 | df[i, 24] == 2| df[i, 25] == 2){
if (df[i, ]$`Temporal Extent` == 1){
count1 = count1 + 1
}
else{
count2 = count2 + 1
}
}
}
count1
count2
View(df)
bob = unique (df$`Statistical methods`)
bob
tabulate(df$`Statistical methods`)
tabulate(as.factor(df$`Statistical methods`))
lapply(df$`Statistical methods`,function(x){ length(unique(x))})
library(dplyr)
library(ggfortify)
library(gridExtra)
library(ggthemes)
library(readxl)
library(stringr)
library(pracma)
library("plyr")
library("plyr")
library(dplyr)
library(ggfortify)
library(gridExtra)
library(ggthemes)
library(readxl)
library(stringr)
library(pracma)
count(df, `Statistical methods`)
count(df, 'Statistical methods')
bob = table(df$`Statistical methods`)
bob = as.dataframe(`Statistical methods`)
bob = as.dataframe(bob)
bob = as.Dataframe(bob)
bob = as.data.frame(bob)
bob
View(bob)
View(bob)
bob = table(df$Cases)
bob
bob = as.data.frame(bob)
View(bob)
View(df)
sum(df$Cases)
sum(df$Cases, na.rm = T)
sum(df$Deaths, na.rm = T)
sum(df$Hospitalizations, na.rm = T)
sum(df$`Case fatality rate`, na.rm = T)
sum(df$`Reproductive ratio`, na.rm = T)
bob = table(df$`Geographical Area of Study`)
bob = as.data.frame(bob)
View(bob)
df$`Other outcome`
View(county_pop)
View(df)
View(df)
View(df)
View(df)
View(df)
View(df)
View(df)
View(df)
sum(df$`Temporal Extent` == 2)
sum(df$`Temporal Extent` == 1)
View(df)
sum(df$`Temporal Extent` == 1 || df$`Temporal Extent` == 3)
sum(df$`Temporal Extent` == 1 | df$`Temporal Extent` == 3)
sum(df$`Temporal Extent` == 3)
View(df)
View(df)
View(df)
View(df)
View(df)
View(df_excess_predictors_county)
load("/Users/JayChandra/Documents/Gov 52/Final Project/main_new.Rdata")
View(county_pop)
